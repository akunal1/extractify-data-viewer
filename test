import requests
import time
import argparse
import xml.etree.ElementTree as ET
import os
from datetime import datetime

def get_auth_headers(username, password):
    """Create basic authentication headers"""
    return {
        'X-Requested-With': 'Qualys Python Script',
        'Authorization': f'Basic {requests.auth._basic_auth_str(username, password)}'
    }

def launch_report(api_url, report_id, headers):
    """Launch a report and get the report ID"""
    launch_url = f"{api_url}/api/2.0/fo/report/?action=launch&id={report_id}"
    response = requests.post(launch_url, headers=headers, verify=True)
    
    if response.status_code != 200:
        print(f"Error launching report: {response.text}")
        return None
    
    # Parse XML response to get the report ID
    root = ET.fromstring(response.text)
    report_id = root.find('.//VALUE').text
    print(f"Report launched with ID: {report_id}")
    return report_id

def check_report_status(api_url, report_id, headers):
    """Check the status of the report"""
    status_url = f"{api_url}/api/2.0/fo/report/?action=list&id={report_id}"
    
    while True:
        response = requests.get(status_url, headers=headers, verify=True)
        
        if response.status_code != 200:
            print(f"Error checking report status: {response.text}")
            return False
        
        root = ET.fromstring(response.text)
        status = root.find('.//STATE').text
        
        if status == "Finished":
            print("Report is ready for download")
            return True
        elif status in ["Running", "Submitted"]:
            print(f"Report status: {status}. Waiting 10 seconds...")
            time.sleep(10)
        else:
            print(f"Report failed with status: {status}")
            return False

def download_report(api_url, report_id, headers, output_dir):
    """Download the report"""
    download_url = f"{api_url}/api/2.0/fo/report/?action=fetch&id={report_id}"
    response = requests.get(download_url, headers=headers, verify=True, stream=True)
    
    if response.status_code != 200:
        print(f"Error downloading report: {response.text}")
        return False
    
    # Get filename from content-disposition header or use default
    filename = None
    if 'Content-Disposition' in response.headers:
        content_disp = response.headers['Content-Disposition']
        if 'filename=' in content_disp:
            filename = content_disp.split('filename=')[1].strip('"\'')
    
    if not filename:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"qualys_report_{report_id}_{timestamp}.pdf"
    
    file_path = os.path.join(output_dir, filename)
    
    with open(file_path, 'wb') as f:
        for chunk in response.iter_content(chunk_size=1024):
            if chunk:
                f.write(chunk)
    
    print(f"Report downloaded successfully to {file_path}")
    return True

def main():
    parser = argparse.ArgumentParser(description='Download a Qualys report')
    parser.add_argument('--username', required=True, help='Qualys username')
    parser.add_argument('--password', required=True, help='Qualys password')
    parser.add_argument('--report_id', required=True, help='Report template ID')
    parser.add_argument('--api_url', required=True, help='Qualys API URL (e.g., https://qualysapi.qualys.com)')
    parser.add_argument('--output_dir', default='.', help='Output directory for the report')
    
    args = parser.parse_args()
    
    # Create headers for authentication
    headers = get_auth_headers(args.username, args.password)
    
    # Launch the report
    report_id = launch_report(args.api_url, args.report_id, headers)
    if not report_id:
        return
    
    # Check report status
    if check_report_status(args.api_url, report_id, headers):
        # Download the report
        download_report(args.api_url, report_id, headers, args.output_dir)
    
if __name__ == "__main__":
    main()





-----
python qualys_report.py --username "your_qualys_username" --password "your_qualys_password" --report_id "your_report_template_id" --api_url "https://qualysapi.qualys.com" --output_dir "/path/to/save/report"
